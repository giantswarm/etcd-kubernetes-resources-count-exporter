apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ tpl .Values.resource.default.name  . }}
  namespace: {{ tpl .Values.resource.default.namespace  . }}
  labels:
    {{- include "etcd-kubernetes-resources-count-exporter.labels" . | nindent 4 }}
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      {{- include "etcd-kubernetes-resources-count-exporter.selectorLabels" . | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        releaseRevision: {{ .Release.Revision | quote }}
      labels:
        {{- include "etcd-kubernetes-resources-count-exporter.selectorLabels" . | nindent 8 }}
    spec:
      hostNetwork: true
      tolerations:
      # Tolerate master taint
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      nodeSelector:
        node-role.kubernetes.io/master: ""
      volumes:
      - name: {{ tpl .Values.resource.default.name  . }}-configmap
        configMap:
          name: {{ tpl .Values.resource.default.name  . }}
          items:
          - key: config.yaml
            path: config.yaml
      - name: certs
        hostPath:
          path: /etc/kubernetes/ssl/etcd/
      serviceAccountName: {{ tpl .Values.resource.default.name  . }}
      securityContext:
        runAsUser: {{ .Values.pod.user.id }}
        runAsGroup: {{ .Values.pod.group.id }}
        {{- with .Values.podSecurityContext }}
          {{- . | toYaml | nindent 8 }}
        {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.registry.domain }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
        volumeMounts:
        - name: {{ tpl .Values.resource.default.name  . }}-configmap
          mountPath: /var/run/{{ .Chart.Name }}/configmap/
        - name: certs
          mountPath: /certs
          readOnly: true
        ports:
        - name: http
          containerPort: {{ .Values.listenPort }}
        args:
        - daemon
        - --config.dirs=/var/run/{{ .Chart.Name }}/configmap/
        - --config.files=config
        livenessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.listenPort }}
          initialDelaySeconds: 15
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.listenPort }}
          initialDelaySeconds: 15
          timeoutSeconds: 1
        securityContext:
          {{- with .Values.securityContext }}
            {{- . | toYaml | nindent 10 }}
          {{- end }}
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 100m
            memory: 100Mi
